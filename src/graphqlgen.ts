// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql'
import { Pokemon, Element } from './generated/prisma-client'
type Context = any

export namespace QueryResolvers {
  export const defaultResolvers = {}

  export interface ArgsSearch {
    query: string
  }

  export type SearchResolver = (
    parent: undefined,
    args: ArgsSearch,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Pokemon[] | Promise<Pokemon[]>

  export interface Type {
    search: (
      parent: undefined,
      args: ArgsSearch,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Pokemon[] | Promise<Pokemon[]>
  }
}

export namespace PokemonResolvers {
  export const defaultResolvers = {
    id: (parent: Pokemon) => parent.id,
    name: (parent: Pokemon) => parent.name
  }

  export type IdResolver = (
    parent: Pokemon,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type NameResolver = (
    parent: Pokemon,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type TypesResolver = (
    parent: Pokemon,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Element[] | Promise<Element[]>

  export interface Type {
    id: (parent: Pokemon, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    name: (parent: Pokemon, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    types: (parent: Pokemon, args: {}, ctx: Context, info: GraphQLResolveInfo) => Element[] | Promise<Element[]>
  }
}

export namespace ElementResolvers {
  export const defaultResolvers = {
    id: (parent: Element) => parent.id,
    name: (parent: Element) => parent.name
  }

  export type IdResolver = (
    parent: Element,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export type NameResolver = (
    parent: Element,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>

  export interface Type {
    id: (parent: Element, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>

    name: (parent: Element, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {}

  export interface ArgsCreatePokemonWithTypes {
    name: string
    types: string[]
  }

  export type CreatePokemonWithTypesResolver = (
    parent: undefined,
    args: ArgsCreatePokemonWithTypes,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Pokemon | null | Promise<Pokemon | null>

  export type DeleteManyPokemonsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Pokemon | null | Promise<Pokemon | null>

  export type DeleteManyElementsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Pokemon | null | Promise<Pokemon | null>

  export interface Type {
    createPokemonWithTypes: (
      parent: undefined,
      args: ArgsCreatePokemonWithTypes,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Pokemon | null | Promise<Pokemon | null>

    deleteManyPokemons: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Pokemon | null | Promise<Pokemon | null>

    deleteManyElements: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Pokemon | null | Promise<Pokemon | null>
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type
  Pokemon: PokemonResolvers.Type
  Element: ElementResolvers.Type
  Mutation: MutationResolvers.Type
}
